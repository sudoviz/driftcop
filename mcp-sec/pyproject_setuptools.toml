[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-sec"
version = "0.1.0"
description = "Security scanner for MCP (Model Context Protocol) servers"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "MCP Security Team", email = "security@mcp.dev"}
]
maintainers = [
    {name = "MCP Security Team", email = "security@mcp.dev"}
]
keywords = [
    "security", "mcp", "model-context-protocol", "scanner", 
    "vulnerability", "static-analysis", "devsecops"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10", 
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: System :: Systems Administration",
    "Typing :: Typed"
]
requires-python = ">=3.9"
dependencies = [
    "typer[all]>=0.9.0",
    "httpx>=0.25.0",
    "pydantic>=2.5.0",
    "jsonschema>=4.20.0",
    "docker>=7.0.0",
    "aiofiles>=23.2.1",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "openai>=1.6.0",
    "python-Levenshtein>=0.23.0",
    "sarif-om>=1.0.4",
    "pyyaml>=6.0.1",
    "rich>=13.7.0",
    "toml>=0.10.2",
    "cryptography>=41.0.7",
    "sigstore>=2.1.0",
    "securesystemslib>=0.28.0",
    "tree-sitter>=0.20.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.12.0",
    "ruff>=0.1.8",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
    "twine>=4.0.2",
    "build>=1.0.3",
    "pip-tools>=7.3.0",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "pip-audit>=2.6.1",
    "memory-profiler>=0.61.0"
]
tree-sitter = [
    "tree-sitter-python>=0.20.4",
    "tree-sitter-javascript>=0.20.3",
    "tree-sitter-typescript>=0.20.3",
    "tree-sitter-java>=0.20.2",
    "tree-sitter-go>=0.20.0",
    "tree-sitter-rust>=0.20.4",
    "tree-sitter-c-sharp>=0.20.0",
    "tree-sitter-ruby>=0.20.0",
    "tree-sitter-php>=0.20.0",
    "tree-sitter-cpp>=0.20.3"
]
all = [
    "mcp-sec[dev,tree-sitter]"
]

[project.urls]
Homepage = "https://github.com/mcp-security/mcp-sec"
Documentation = "https://mcp-security.github.io/mcp-sec"
Repository = "https://github.com/mcp-security/mcp-sec.git"
Issues = "https://github.com/mcp-security/mcp-sec/issues"
Changelog = "https://github.com/mcp-security/mcp-sec/blob/main/CHANGELOG.md"

[project.scripts]
mcp-sec = "mcp_sec.cli:app"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
mcp_sec = ["py.typed", "*.toml", "*.json", "*.yaml"]

# Development tools configuration
[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err`
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["S101", "D", "ANN"]
"src/mcp_sec/__init__.py" = ["F401"]

[tool.ruff.isort]
force-single-line = true
known-first-party = ["mcp_sec"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "tree_sitter.*",
    "docker.*",
    "sklearn.*",
    "numpy.*",
    "sarif_om.*",
    "sigstore.*",
    "securesystemslib.*",
    "Levenshtein.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "-ra"
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmarks",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
    ".tox/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "build", "dist"]
skips = ["B101", "B601"]