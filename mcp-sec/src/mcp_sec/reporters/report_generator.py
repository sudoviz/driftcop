"""Generate security reports in various formats."""

import json
from datetime import datetime
from enum import Enum
from typing import Dict, Any, List

# SARIF types - in production, use sarif-om library

from mcp_sec.models import ScanResult, Finding, Severity
from mcp_sec.config import config


class ReportFormat(str, Enum):
    """Supported report formats."""
    MARKDOWN = "markdown"
    JSON = "json"
    SARIF = "sarif"


def generate_report(result: ScanResult, format: ReportFormat) -> str:
    """Generate a report in the specified format."""
    if format == ReportFormat.MARKDOWN:
        return _generate_markdown(result)
    elif format == ReportFormat.JSON:
        return _generate_json(result)
    elif format == ReportFormat.SARIF:
        return _generate_sarif(result)
    else:
        raise ValueError(f"Unsupported format: {format}")


def _generate_markdown(result: ScanResult) -> str:
    """Generate a Markdown report."""
    lines = []
    
    # Header
    lines.append("# MCP Security Scan Report")
    lines.append("")
    
    # Get metadata values
    scanned_at = result.metadata.get("scanned_at", datetime.now().isoformat())
    scan_duration = result.metadata.get("scan_duration_seconds", 0.0)
    total_risk_score = result.metadata.get("total_risk_score", 0.0)
    
    lines.append(f"**Scan Date:** {scanned_at}")
    lines.append(f"**Duration:** {scan_duration:.2f}s")
    lines.append(f"**Total Risk Score:** {total_risk_score:.2f}/10.0")
    
    # Add source information if from GitHub
    if result.metadata.get("source") == "github":
        lines.append(f"**Repository:** {result.metadata.get('repository', 'Unknown')}")
        lines.append(f"**Branch:** {result.metadata.get('branch', 'Unknown')}")
        lines.append(f"**URL:** {result.metadata.get('url', 'Unknown')}")
    
    lines.append("")
    
    # Summary
    lines.append("## Summary")
    lines.append("")
    lines.append("| Severity | Count |")
    lines.append("|----------|-------|")
    lines.append(f"| Critical | {result.critical_count} |")
    lines.append(f"| High | {result.high_count} |")
    lines.append(f"| Medium | {result.medium_count} |")
    lines.append(f"| Low | {result.low_count} |")
    lines.append("")
    
    # Findings
    if result.findings:
        lines.append("## Findings")
        lines.append("")
        
        # Group by severity
        by_severity = {}
        for finding in result.findings:
            by_severity.setdefault(finding.severity, []).append(finding)
        
        for severity in [Severity.CRITICAL, Severity.HIGH, Severity.MEDIUM, Severity.LOW, Severity.INFO]:
            if severity in by_severity:
                lines.append(f"### {severity.value.title()} Severity")
                lines.append("")
                
                for finding in by_severity[severity]:
                    lines.append(f"#### {finding.title}")
                    lines.append("")
                    lines.append(f"**Category:** {finding.category.value}")
                    lines.append(f"**Description:** {finding.description}")
                    
                    if finding.file_path:
                        # Check for GitHub URL in metadata
                        if finding.metadata.get("github_url"):
                            lines.append(f"**Location:** [{finding.file_path}]({finding.metadata['github_url']})")
                        else:
                            location = finding.file_path
                            if finding.line_number:
                                location += f":{finding.line_number}"
                            lines.append(f"**Location:** `{location}`")
                    
                    if finding.cwe_id:
                        lines.append(f"**CWE:** {finding.cwe_id}")
                    
                    if finding.recommendation:
                        lines.append(f"**Recommendation:** {finding.recommendation}")
                    
                    lines.append("")
    else:
        lines.append("## No Security Issues Found")
        lines.append("")
        lines.append("Congratulations! No security issues were detected.")
    
    lines.append("")
    lines.append("---")
    lines.append("*Generated by MCP Security Scanner*")
    
    return "\n".join(lines)


def _generate_json(result: ScanResult) -> str:
    """Generate a JSON report."""
    # Convert to dict and enrich with GitHub URLs
    data = result.dict()
    
    # Ensure GitHub URLs are included in findings
    for finding in data.get("findings", []):
        if finding.get("metadata", {}).get("github_url"):
            finding["github_url"] = finding["metadata"]["github_url"]
    
    return json.dumps(data, indent=2, default=str)


def _generate_sarif(result: ScanResult) -> str:
    """Generate a SARIF report for CI/CD integration."""
    
    # Create SARIF 2.1.0 compliant structure
    sarif = {
        "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
        "version": "2.1.0",
        "runs": [{
            "tool": {
                "driver": {
                    "name": "mcp-sec",
                    "version": "0.1.0",
                    "informationUri": "https://github.com/example/mcp-sec",
                    "rules": _create_sarif_rules(result.findings)
                }
            },
            "results": [],
            "invocations": [{
                "executionSuccessful": True,
                "endTimeUtc": datetime.utcnow().isoformat() + "Z"
            }]
        }]
    }
    
    # Add results
    for finding in result.findings:
        sarif_result = {
            "ruleId": finding.category.value,
            "level": _severity_to_sarif_level(finding.severity),
            "message": {"text": finding.description},
            "locations": []
        }
        
        # Add location if available
        if finding.file_path:
            location = {
                "physicalLocation": {
                    "artifactLocation": {"uri": finding.file_path}
                }
            }
            
            if finding.line_number:
                location["physicalLocation"]["region"] = {
                    "startLine": finding.line_number,
                    "startColumn": finding.column_number or 1
                }
            
            sarif_result["locations"].append(location)
        
        # Add fix if available
        if finding.recommendation:
            sarif_result["fixes"] = [{
                "description": {"text": finding.recommendation}
            }]
        
        sarif["runs"][0]["results"].append(sarif_result)
    
    return json.dumps(sarif, indent=2)


def _create_sarif_rules(findings: List[Finding]) -> List[Dict[str, Any]]:
    """Create SARIF rule descriptors from findings."""
    rules_dict = {}
    
    for finding in findings:
        rule_id = finding.category.value
        if rule_id not in rules_dict:
            rule = {
                "id": rule_id,
                "name": finding.category.value.replace("_", " ").title(),
                "shortDescription": {"text": f"Detects {finding.category.value}"},
                "fullDescription": {"text": f"Security rule to detect {finding.category.value} issues in MCP configurations and usage"},
                "defaultConfiguration": {
                    "level": _severity_to_sarif_level(Severity.MEDIUM)
                }
            }
            
            if finding.cwe_id:
                rule["properties"] = {
                    "tags": ["security", finding.cwe_id],
                    "security-severity": _severity_to_score(finding.severity)
                }
            
            rules_dict[rule_id] = rule
    
    return list(rules_dict.values())


def _severity_to_sarif_level(severity: Severity) -> str:
    """Convert severity to SARIF level."""
    mapping = {
        Severity.CRITICAL: "error",
        Severity.HIGH: "error",
        Severity.MEDIUM: "warning",
        Severity.LOW: "note",
        Severity.INFO: "note"
    }
    return mapping.get(severity, "warning")


def _severity_to_score(severity: Severity) -> str:
    """Convert severity to numeric score for SARIF."""
    mapping = {
        Severity.CRITICAL: "9.0",
        Severity.HIGH: "7.0",
        Severity.MEDIUM: "5.0",
        Severity.LOW: "3.0",
        Severity.INFO: "1.0"
    }
    return mapping.get(severity, "5.0")